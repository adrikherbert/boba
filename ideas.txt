DATA TYPES:
    * str -> string
    * char -> character
    * num -> int and float
    * bool -> boolean
    * list -> array/list
    * function -> treated as a data type

VARIABLES SYNTAX:
    * `make` [type] [name] #[value] <- `#` means optional
         make num i 10
         make str hello "hello" <- str defined by double quotes
         make char a 'a' <- char defined by single quotes
         make list l [1 2 3 "hello" 4 "goodbye"] <- dynamic list

    * `change [name] to [value]` to set a variable
        change i to 20
        change a to 'b'
        change list1 to list2

    * `[name]++ or [name]--` to inc/dec
        make num i 10
        i++ <- (i = 11)

CONDITIONALS:
    * COMPARISON OPERATORS:
        * is (==)
        * isn't (!=)
        * <, >, <=, >=

    * LOGICAL OPERATORS:
        * and (&&)
        * or (||)
        * not (!)
        * xor (^)

    IF:
        make num x 10
        make num y 20
        make num i

        if x isn't y {
            change i to 20
        } elsif x is y {
            change i to 30
        } else {
            change i to 40
        }

LOOPS:

    simple for syntax: `for [variable] from [num] to [num]`
    ***NOTE: [num] must be an integer

    SIMPLE FOR:
        make num x 0

        for i from 1 to 10 {
            x++
        }

    LIST ITERATION:
        `for [variable] in [list]`

        make num x 0

        for i in list {
            do something
        }

FUNCTIONS:

    `make` keyword comes back

    make function say_this(str s) {
        print s
    }

TRY CATCH:

    Exceptions in Java --> Disasters in Poco

    try {
        block of code
    } save <disaster> d {
        do something
    }
    
COMMENTS:

   startwith: ~ endwith: ~

   ~ this is a comment ~

   ~
   this is a
   multiline-
   style comment
   ~

IDEAS FOR CREATING ABSTRACT SYNTAX TREE:

    * Need a root module
    * Parse steps into traversable syntax tree
    * Parentheses denote branch creation
    * Traversed left to right
