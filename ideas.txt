DATA TYPES:
    * string -> string
    * character -> character
    * number -> int and float
    * boolean -> boolean
    * list -> array/list
    * function -> treated as a data type

VARIABLES SYNTAX:
    * `make` [type] [name] #[value] <- `#` means optional
         make number i 10
         make string hello "hello" <- str defined by double quotes
         make character a 'a' <- char defined by single quotes
         make list l [1 2 3 4 5] <- single-type list

    * `change [name] to [value]` to set a variable
        change i to 20
        change a to 'b'
        change list1 to list2

    * `[name]++ or [name]--` to inc/dec
        make number i 10
        i++ <- (i = 11)

CONDITIONALS:
    * COMPARISON OPERATORS:
        * is (==)
        * isn't (!=)
        * <, >, <=, >=

    * LOGICAL OPERATORS:
        * and (&&)
        * or (||)
        * not (!)
        * xor (^)

    IF:
        make number x 10
        make number y 20
        make number i

        if x is y {
            do something
        } orif x isn't y {
            do something
        } else {
            do something
        }

LOOPS:

    simple for syntax: `for [variable] from [num] to [num]`
    ***NOTE: [num] must be an integer

    SIMPLE FOR:

        make number x 0

        for i from 1 to 10 {
            print x
            increment x
        }


    LIST ITERATION:
        `for [variable] in [list]`

        make number x 0

        for i in list {
            do something
        }

FUNCTIONS:

    `make` keyword comes back

    make function say_this(string s) {
        print s
    }

TRY CATCH:

    Exceptions in Java --> Disasters in Poco

    try {
        block of code
    } save <disaster> d {
        do something
    }
    
COMMENTS:

   startwith: ~ endwith: ~

   ~ this is a comment ~

   ~
   this is a
   multiline-
   style comment
   ~

IDEAS FOR CREATING ABSTRACT SYNTAX TREE:

    * Need a root module
    * Parse steps into traversable syntax tree
    * Parentheses denote branch creation
    * Traversed left to right


SUMMARY:

    make number x 10
    make string hello "hello"
    make character c 'c'
    make list num_list [1 2 3 4 5]

    make function print_me(string p) {
        print p
    }

    if x is 1 {
        do something
    } orif (x is 2) {
        do something
    } else {
        do something
    }

    for i from 1 to 10 {
        print i
    }

    change x to 20

    print x